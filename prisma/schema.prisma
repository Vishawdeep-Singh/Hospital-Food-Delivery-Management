// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int     @id @default(autoincrement())
  email     String  @unique
  password  String
  name      String
  role      Role  // manager, staff, delivery
  createdAt DateTime @default(now())
  contact   String
  updatedAt DateTime @updatedAt
  pantries PantryOnUser[]
   mealPreparations FoodPreparationTracker[]
}

model Patient {
  id        Int     @id @default(autoincrement())
  name      String
  age       Int
  gender    String
  room      String
  bed       String
  floor     Int
  contact   String
  emergencyContact String
  allergies            Allergy[]
  diseases             Disease[]
  dietaryRestrictions  DietaryRestriction[]
  dietCharts           DietChart[]
  mealLogs             MealLog[]
  FoodPreparationTracker FoodPreparationTracker[]
}

model MealLog {
  id          Int      @id @default(autoincrement())
  patientId   Int
  patient     Patient  @relation(fields: [patientId], references: [id])
  date        DateTime @default(now())
  breakfast   Boolean  @default(false) 
  lunch       Boolean  @default(false) 
  dinner      Boolean  @default(false) 
  servedBy    String?  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


model DietChart {
  id            Int      @id @default(autoincrement())
  patientId     Int
  patient       Patient   @relation(fields: [patientId], references: [id])
  morningName   String
  morningIngredients String
  eveningName   String
  eveningIngredients String
  nightName     String
  nightIngredients String
  createdAt     DateTime @default(now())
  instructions  String?
  foodPreparations     FoodPreparationTracker[]
}


model Allergy {
  id       Int    @id @default(autoincrement())
  name     String
  patient  Patient @relation(fields: [patientId], references: [id])
  patientId Int
}

model Disease {
  id       Int    @id @default(autoincrement())
  name     String
  patient  Patient @relation(fields: [patientId], references: [id])
  patientId Int
}

model DietaryRestriction {
  id       Int    @id @default(autoincrement())
  name     String
  patient  Patient @relation(fields: [patientId], references: [id])
  patientId Int
}

model Pantry {
  id        Int     @id @default(autoincrement())
  name      String
 location String
  staff PantryOnUser[]
}

model PantryOnUser {
  userId   Int
  pantryId Int
  user     User   @relation(fields: [userId], references: [id])
  pantry   Pantry @relation(fields: [pantryId], references: [id])
  @@id([userId, pantryId])
}

model FoodPreparationTracker {
  id              Int          @id @default(autoincrement())
  status          PrepStatus   @default(NOT_STARTED)
  startTime       DateTime?    
  endTime         DateTime?    
  staffId         Int
  staff           User         @relation(fields: [staffId], references: [id])
  patientId       Int
  patient         Patient      @relation(fields: [patientId], references: [id])
  dietChartId     Int
  dietChart       DietChart    @relation(fields: [dietChartId], references: [id])
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}


enum PrepStatus {
  NOT_STARTED
  IN_PROGRESS
  FINISHED
}

enum Role {
  MANAGER
  STAFF
  DELIVERY
}